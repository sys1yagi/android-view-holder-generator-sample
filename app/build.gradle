apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:+'
}

import com.sun.codemodel.*
import groovy.xml.*

String camerize(String snakeCased) {
    def first = snakeCased.substring(0, 1)
    def rest = snakeCased.substring(1)
    return first.toUpperCase() + rest.toLowerCase()
}

String qualifyViewClassName(String name) {
    if (name.contains(".")) { // already fully-qualified
        return name
    }
    else if (name == "View") {
        return "anndroid.view.$name"
    }
    else {
        return "android.widget.$name"
    }
}

ext.generateViewHolders = { xmlFiles ->
    def manifestXml = new XmlSlurper().parse(file("src/main/AndroidManifest.xml"))

    def pkg = manifestXml.'@package'.toString()
    def androidNs = new Namespace("http://schemas.android.com/apk/res/android",
        "android")
    def xmlParser = new XmlParser()

    def javaSourceDir = file("src/main/java")
    javaSourceDir.mkdirs()
    def model = new JCodeModel()

    xmlFiles.each { File layoutXml ->
        def simpleName = layoutXml.getName().split('\\.')[0]
        def className = simpleName.split('_').collect { String part ->
            camerize(part)
        }.join('') + "ViewHolder"
        println("Generating ${className}.java from $layoutXml")

        def vhClass = model._class(pkg + ".generated.viewholder.$className")

        def layout = xmlParser.parse(layoutXml)

        def rootViewType = model.ref(qualifyViewClassName(layout.name()))
        vhClass.field(JMod.PUBLIC | JMod.FINAL, rootViewType, "view")

        def contextType = model.ref("android.content.Context")
        def viewType = model.ref("android.view.View")
        def viewGroupType = model.ref("android.view.ViewGroup")

        // ViewHolder.from(Context context, ViewGroup rootView)
        ({
            JMethod from2 = vhClass.method(JMod.PUBLIC | JMod.STATIC, vhClass, "from")
            JVar context =  from2.param(contextType, "context")
            JVar viewGroup =  from2.param(viewGroupType, "viewGroup")

            JBlock body = from2.body()
            JFieldRef resId = model.ref("${pkg}.R.layout").staticRef(simpleName)
            JInvocation inflateExpr = viewType.staticInvoke("inflate").arg(context).arg(resId).arg(viewGroup)
            JVar rootView = body.decl(rootViewType, "rootView", JExpr.cast(rootViewType, inflateExpr))
            JVar holder = body.decl(vhClass, "holder", JExpr._new(vhClass).arg(rootView))
            body._return(holder)
        })()

        // ViewHolder.from(Context context, View convertView, ViewGroup rootView)
        ({
            JMethod from3 = vhClass.method(JMod.PUBLIC | JMod.STATIC, vhClass, "from")

            JBlock body = from3.body()
            JVar holder = body.decl(vhClass, "holder", JExpr._null())
            body._return(holder)
        })()

        // ViewHolder(View rootView)
        JMethod ctr = vhClass.constructor(JMod.PUBLIC)
        JVar rootView =  ctr.param(rootViewType, "rootView")

        JBlock body =  ctr.body();
        body.assign(JExpr._this().ref("view"), rootView)

        Closure<Void> walk
        walk = { Node element ->
            def widgetId = element.attribute(androidNs.get("id"))
            if (widgetId != null) {
                def parts = widgetId.split('/') // like '@id+/name'
                def id = parts[1]

                JClass elementType = model.ref(qualifyViewClassName(element.name()))
                vhClass.field(JMod.PUBLIC | JMod.FINAL, elementType, id)

                // holder = (T)findViewById(R.id.name)
                JInvocation findViewById = rootView.invoke("findViewById").arg(model.ref(pkg + ".R.id").staticRef(id))
                body.assign(JExpr._this().ref(id), JExpr.cast(elementType, findViewById))

            }

            element.children().each { walk(it) }
        }

        walk(layout)
    }

    model.build(javaSourceDir)
}

preBuild.dependsOn(task("generateViewHolders") << {
    generateViewHolders(fileTree(dir: "src/main", include: "res/layout/*.xml"))
})
